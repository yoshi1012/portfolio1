# Asana風タスク管理アプリケーション 設定ファイル
#
# このファイルには、アプリケーションの動作を制御する設定が含まれています。
#
# 初心者向け解説:
# 設定ファイルは、プログラムの動作を変更するためのファイルです。
# コードを変更せずに、設定ファイルを編集するだけで動作を変えられます。
#
# 例えば:
# - サーバーのポート番号を変更
# - データベースの接続先を変更
# - JWTトークンの有効期限を変更
#
# 設定は環境変数で上書きできます。
# 例: export SERVER_PORT=9000

# ============================================================================
# サーバー設定
# ============================================================================

server {
  # サーバーがリクエストを受け付けるインターフェース
  # 0.0.0.0 = 全てのネットワークインターフェースで受け付ける
  # localhost = ローカルホストからのみ受け付ける
  interface = "0.0.0.0"
  interface = ${?SERVER_INTERFACE}

  # サーバーがリクエストを受け付けるポート番号
  port = 8080
  port = ${?SERVER_PORT}
}

# ============================================================================
# データベース設定
# ============================================================================

database {
  # データベース接続URL
  # 形式: jdbc:postgresql://ホスト名:ポート番号/データベース名
  url = "jdbc:postgresql://localhost:5432/taskmanagement_db"
  url = ${?DATABASE_URL}

  # データベースユーザー名
  user = "postgres"
  user = ${?DATABASE_USER}

  # データベースパスワード
  password = "postgres"
  password = ${?DATABASE_PASSWORD}

  # コネクションプール設定
  # コネクションプールとは、データベース接続を使い回す仕組みです
  # 毎回接続を作り直すのは遅いので、一度作った接続を再利用します
  connection-pool {
    # 最小接続数
    min-connections = 5
    
    # 最大接続数
    max-connections = 20
    
    # 接続タイムアウト（ミリ秒）
    connection-timeout = 30000
    
    # アイドルタイムアウト（ミリ秒）
    # この時間使われなかった接続は閉じられます
    idle-timeout = 600000
  }
}

# ============================================================================
# JWT認証設定
# ============================================================================

jwt {
  # JWT署名用の秘密鍵
  # 本番環境では必ず変更してください！
  # 長くてランダムな文字列を使用することを推奨します
  secret = "your-secret-key-change-this-in-production"
  secret = ${?JWT_SECRET}

  # トークンの有効期限（時間単位）
  # 24時間 = 1日
  expiration-hours = 24
  expiration-hours = ${?JWT_EXPIRATION_HOURS}
}

# ============================================================================
# Akka HTTP設定
# ============================================================================

akka {
  # ログレベル
  # DEBUG: 詳細なログを出力（開発時）
  # INFO: 通常のログを出力（本番環境）
  # WARNING: 警告のみ出力
  # ERROR: エラーのみ出力
  loglevel = "INFO"
  loglevel = ${?LOG_LEVEL}

  http {
    server {
      # リクエストタイムアウト（秒）
      # この時間内にレスポンスを返さないとタイムアウトエラー
      request-timeout = 60s

      # アイドルタイムアウト（秒）
      # この時間接続が使われないと切断されます
      idle-timeout = 120s

      # 最大接続数
      max-connections = 1024

      # パーサー設定
      parsing {
        # リクエストボディの最大サイズ
        max-content-length = 10m

        # URIの最大長
        max-uri-length = 4k

        # ヘッダーの最大サイズ
        max-header-value-length = 16k
      }
    }

    client {
      # 接続タイムアウト（秒）
      connecting-timeout = 10s

      # アイドルタイムアウト（秒）
      idle-timeout = 60s
    }
  }

  actor {
    default-dispatcher {
      # スレッドプール設定
      type = "Dispatcher"
      executor = "fork-join-executor"
      
      fork-join-executor {
        # 最小スレッド数
        parallelism-min = 8
        
        # 最大スレッド数
        parallelism-max = 64
        
        # スレッド数の計算式
        # parallelism-factor * CPUコア数
        parallelism-factor = 3.0
      }
      
      # スループット
      # 1つのアクターが連続して処理できるメッセージ数
      throughput = 5
    }
  }
}

# ============================================================================
# アプリケーション固有の設定
# ============================================================================

application {
  # アプリケーション名
  name = "Asana風タスク管理アプリケーション"
  
  # バージョン
  version = "1.0.0"
  
  # 通知設定
  notifications {
    # 通知を有効にするかどうか
    enabled = true
    
    # 通知の保持期間（日数）
    # この期間を過ぎた通知は削除されます
    retention-days = 30
  }
  
  # タスク設定
  tasks {
    # タスクタイトルの最大文字数
    max-title-length = 500
    
    # タスク説明の最大文字数
    max-description-length = 10000
    
    # 1プロジェクトあたりの最大タスク数
    max-tasks-per-project = 10000
  }
  
  # プロジェクト設定
  projects {
    # プロジェクト名の最大文字数
    max-name-length = 255
    
    # プロジェクト説明の最大文字数
    max-description-length = 5000
    
    # 1ワークスペースあたりの最大プロジェクト数
    max-projects-per-workspace = 1000
  }
}
